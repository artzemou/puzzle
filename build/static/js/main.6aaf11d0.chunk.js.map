{"version":3,"sources":["Upload.js","Cropper.js","GridSelector.js","Image.js","App.js","serviceWorker.js","index.js"],"names":["baseStyle","flex","display","flexDirection","alignItems","justifyContent","width","height","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","outline","transition","Upload","setImages","history","useHistory","useDropzone","accept","onDrop","files","src","URL","createObjectURL","push","acceptedFiles","getRootProps","getInputProps","style","map","file","key","path","size","useMemo","className","CropperGrid","useState","stage","setStage","rotation","setRotation","zoom","setZoom","useEffect","transformImg","draggable","stageWidth","stageHeight","Konva","Stage","container","layer","Layer","fitStageIntoParentContainer","scale","document","querySelector","offsetWidth","x","y","draw","isMobile","match","window","matchMedia","msMatchMedia","matches","add","Image","fromURL","img","offsetX","offsetY","getWidth","getHeight","rotate","batchDraw","scaleBy","on","e","evt","preventDefault","oldScale","scaleX","mousePointTo","getPointerPosition","newScale","deltaY","newPos","position","lastDist","getDistance","p1","p2","Math","sqrt","pow","touch1","touches","touch2","dist","clientX","clientY","scaleY","shiftKey","id","onClick","dataURL","toDataURL","createElement","setAttribute","getElementById","appendChild","exportImage","xmin","xmax","xstep","axis","onChange","htmlFor","helper","GridSelector","images","thumbs","setThumbs","cut","useCallback","gridX","gridY","data","percentage","percentageY","image","floor","random","length","i","xpos","ypos","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","offsetHeight","element","panzoom","thumb","overflow","boxShadow","onDoubleClick","console","log","to","querySelectorAll","forEach","el","params","App","exact","render","Cropper","props","value","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6aaf11d0.chunk.js","sourcesContent":["import React, {useMemo} from 'react'\nimport {useDropzone} from 'react-dropzone';\nimport { useHistory } from \"react-router-dom\";\n\nconst baseStyle = {\n  flex: 1,\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  justifyContent: 'center',\n  width: 200,\n  height: 200,\n  padding: '20px',\n  borderWidth: 2,\n  borderRadius: 2,\n  borderColor: '#eeeeee',\n  borderStyle: 'dashed',\n  backgroundColor: '#ffffff',\n  outline: 'none',\n  transition: 'border .24s ease-in-out'\n};\n\nconst Upload = ({setImages}) => {\n    let history = useHistory();\n  \n    const {acceptedFiles, getRootProps, getInputProps} = useDropzone({\n      accept: 'image/*',\n      onDrop: files => {\n          setImages([{ src: URL.createObjectURL(files[0])}])\n          history.push('/crop')\n        }\n    });\n  \n    const files = acceptedFiles.map(file => (\n      <li key={file.path}>\n        {file.path} - {file.size} bytes\n      </li>\n    ))\n\n    const style = useMemo(() => ({\n      ...baseStyle,\n    }), []);\n\n\n    return (\n        <section className=\"container\">\n          <div {...getRootProps({className: 'dropzone', style})}>\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop some files here, or click to select files</p>\n          </div>\n        </section>\n    )\n  }\n  \n  export default Upload","import React, { useState, useEffect } from 'react'\nimport { useHistory } from \"react-router-dom\";\nimport Slider from 'react-input-slider';\nimport Konva from 'konva';\n\nconst CropperGrid = ({src, setImages}) => {\n  let history = useHistory();\n  \n  const [stage, setStage] = useState(null)\n  const [rotation, setRotation] = useState(0)\n  const [zoom, setZoom] = useState(1)\n\n  useEffect(() => {\n      transformImg(src, zoom, rotation)\n  }, [src, rotation, zoom])\n\n  const transformImg = (src, zoom, rotation, draggable=false) => {\n    \n    var stageWidth = 500 ;\n    var stageHeight = 350;\n    \n  \n    var stage = new Konva.Stage({\n      container: 'container',\n      width: stageWidth,\n      height: stageHeight\n    });\n\n    \n    \n    var layer = new Konva.Layer();\n    stage.add(layer);\n\n    // adapt the stage on any window resize\n    function fitStageIntoParentContainer() {\n      var container = document.querySelector('#stage-parent');\n\n      // now we need to fit stage into parent\n      var containerWidth = container.offsetWidth;\n      // to do this we need to scale the stage\n      var scale = containerWidth / stageWidth;\n\n      stage.width(stageWidth * scale);\n      stage.height(stageHeight * scale);\n      stage.scale({ x: scale, y: scale });\n      stage.draw();\n    }\n\n    fitStageIntoParentContainer();\n    \n\n    function isMobile() {\n      var match = window.matchMedia || window.msMatchMedia;\n      if(match) {\n          var mq = match(\"(pointer:coarse)\");\n          return mq.matches;\n      }\n      return false;\n    }\n\n    draggable = isMobile()\n\n    Konva.Image.fromURL(src, img => {\n      img.draggable(draggable)\n      img.offsetX(img.width() / 2);\n      img.offsetY(img.height() / 2);\n      img.scale({x:zoom, y:zoom})\n      img.x(stage.getWidth() / 2)\n      img.y(stage.getHeight() / 2)\n      img.rotate(rotation);\n      layer.add(img);\n      layer.batchDraw();\n    });\n\n\n    \n\n    \n    //zoom on scroll\n    var scaleBy = 1.5;\n    stage.on('wheel', e => {\n      e.evt.preventDefault();\n        var oldScale = stage.scaleX();\n\n        var mousePointTo = {\n          x: stage.getPointerPosition().x / oldScale - stage.x() / oldScale,\n          y: stage.getPointerPosition().y / oldScale - stage.y() / oldScale\n        };\n\n        var newScale =\n          e.evt.deltaY < 0 ? oldScale * scaleBy : oldScale / scaleBy;\n        stage.scale({ x: newScale, y: newScale });\n\n        var newPos = {\n          x:\n            -(mousePointTo.x - stage.getPointerPosition().x / newScale) *\n            newScale,\n          y:\n            -(mousePointTo.y - stage.getPointerPosition().y / newScale) *\n            newScale\n        };\n        stage.position(newPos);\n        stage.batchDraw();\n\n\n    });\n\n\n    // zoom on dbltouch\n    var lastDist = 0;\n\n    function getDistance(p1, p2) {\n      return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n    }\n\n    stage.on('touchmove', function(e) {\n      e.evt.preventDefault();\n      var touch1 = e.evt.touches[0];\n      var touch2 = e.evt.touches[1];\n\n      if (touch1 && touch2) {\n        var dist = getDistance(\n          {\n            x: touch1.clientX,\n            y: touch1.clientY\n          },\n          {\n            x: touch2.clientX,\n            y: touch2.clientY\n          }\n        );\n\n        if (!lastDist) {\n          lastDist = dist;\n        }\n\n        var scale = (stage.scaleX() * dist) / lastDist;\n\n        stage.scaleX(scale);\n        stage.scaleY(scale);\n        stage.batchDraw();\n        lastDist = dist;\n      }\n    });\n\n    stage.on('touchend', function() {\n      lastDist = 0;\n    });\n    \n    // zoom on dblClick\n    stage.on('dblclick', function(e) {\n      e.evt.preventDefault();\n      var oldScale = stage.scaleX();\n      var newScale = !e.evt.shiftKey ? oldScale * scaleBy : oldScale / scaleBy;\n\n      var mousePointTo = {\n          x: stage.getPointerPosition().x / oldScale - stage.x() / oldScale,\n          y: stage.getPointerPosition().y / oldScale - stage.y() / oldScale\n      };\n      stage.scale({ x: newScale, y: newScale });\n      var newPos = {\n        x:\n          -(mousePointTo.x - stage.getPointerPosition().x / newScale) *\n          newScale,\n        y:\n          -(mousePointTo.y - stage.getPointerPosition().y / newScale) *\n          newScale\n      };\n\n      stage.position(newPos);\n      layer.batchDraw();\n    });\n\n\n    setStage(stage)\n  }\n\n  const exportImage = () => {\n    var dataURL = stage.toDataURL();\n    let img = document.createElement('img')\n    img.setAttribute('crossOrigin', 'anonymous');\n    img.width = 500\n\n    img.src = dataURL\n    document.getElementById('apercu').appendChild(img)\n    setImages([{src: dataURL}])\n    history.push('/gridselector')\n  }\n\n  return (\n    <div className=\"Cropper\">\n      <div className=\"crop-container\">\n      </div>\n      <div id=\"container\"></div>\n      <div id=\"stage-parent\">\n        <div id=\"container\"></div>\n        <div id=\"apercu\"></div>\n      </div>\n      <div className=\"Cropper-controls\">\n        <button\n            className=\"Cropper-btn-crop\"\n            onClick={() => exportImage()}\n          >Recadrer</button>\n       \n        <div>\n          <Slider\n            xmin={.1}\n            xmax={3}\n            xstep={.1}\n            axis=\"x\"\n            x={zoom}\n            onChange={({ x }) => {\n              setZoom(x)\n            }}\n          />\n          <label htmlFor=\"volume\">Zoom</label>\n          <Slider\n            xmin={0}\n            xmax={360}\n            xstep={.1}\n            axis=\"x\"\n            x={rotation}\n            onChange={({ x }) => {\n              setRotation(x)\n            }}\n          />\n          <label htmlFor=\"volume\">Rotation</label>\n        </div>\n\n      </div>\n    </div>\n  )\n}\n\nexport default CropperGrid","import React, { useState, useEffect, useCallback } from 'react';\nimport { Link } from \"react-router-dom\";\nimport panzoom from \"panzoom\"\n\n\nvar helper = {\n    doc: (id) => document.getElementById(id) || document.createElement(\"div\"),\n  \n    shuffle: (id) => {\n        var ul = document.getElementById(id);\n        for (var i = ul.children.length; i >= 0; i--) {\n            ul.appendChild(ul.children[Math.random() * i | 0]);\n        }\n    }\n}\n  \nconst GridSelector = ({images, thumbs, setThumbs}) => {\n    const cut = useCallback((images, gridX= 10, gridY= 7) => {\n            var data = []\n            var percentage = 100 / (gridX - 1);\n            var percentageY = 100 / (gridY - 1);\n            var image = images[Math.floor(Math.random() * images.length)];\n            helper.doc('actualImage').setAttribute('src', image.src);\n            // 4961 / 3508\n            for (var i = 0; i < gridX * gridY; i++) {\n                var xpos = (percentage * (i % gridX)) + '%';\n                // var xpos = (percentage * Math.floor(i % gridX)) + '%';\n                var ypos = (percentageY * Math.floor(i / gridX)) + '%';\n                // var ypos = (percentageY * (i / gridY)) + '%';\n      \n                data = [\n                    ...data,\n                    {\n                        id: i,\n                        src: image.src,\n                        backgroundImage: 'url(' + image.src + ')',\n                        backgroundSize: (gridX * 100) + '%' + (gridY * 100) + '%',\n                        backgroundPosition: xpos + ' ' + ypos,\n                        width: helper.doc('sortable').offsetWidth / gridX + 'px',\n                        backgroundRepeat:\"no-repeat\",\n                        height: (helper.doc('sortable').offsetHeight / gridY) + 'px'\n                        \n                    }\n                ]\n      \n                // helper.doc('sortable').appendChild(li);\n            }\n            setThumbs(data)\n           \n        }, [setThumbs])\n\n    useEffect(() => {\n        if(images.length) cut(images)\n        var element = helper.doc('Grid-selector')\n        panzoom(element, {\n            // onDoubleClick: function(e) {\n            //   // `e` - is current double click event.\n          \n            //   return false; // tells the library to not preventDefault, and not stop propagation\n            // }\n          })\n      \n    }, [cut, images])\n\n\n    return (\n        <>\n            <div id=\"Grid\">\n                <section id=\"Grid-selector\">\n                    <ul id=\"sortable\" className=\"sortable\">\n                        {thumbs.map((thumb)=>(\n                            <li key={thumb.id} style={{\n                                backgroundImage: thumb.backgroundImage,\n                                backgroundSize: thumb.backgroundSize,\n                                backgroundPosition: thumb.backgroundPosition,\n                                width: thumb.width,\n                                height: thumb.height,\n                                overflow: 'hidden',\n                                boxShadow: 'inset 0 0 1px rgba(0, 0, 0, .5)',\n                                backgroundRepeat:thumb.backgroundRepeat}}>\n                                    <Link \n                                        // onClick={(e) => {\n                                        //     e.preventDefault()\n                                        //     window.location =  `${window.location}/${thumb.id}`\n                                        // }} \n                                        onDoubleClick={(e) => {\n                                            console.log(`${thumb.id} is dblcClicked`)\n                                        }} \n                                        to={`/mOsaic/${thumb.id}`}\n                                        >\n                                    </Link>\n                            </li>\n                        ))} \n                    </ul>\n                </section>\n            </div>\n            <div id=\"actualImageBox\">\n                <button onClick={(e) => {\n                    if(document.querySelector(\"#sortable li\").style.boxShadow !== 'none') {\n                        document.querySelectorAll(\"#sortable li\").forEach(el => {\n                            el.style.boxShadow ='none'\n                        });\n                    }\n                    else {\n                        document.querySelectorAll(\"#sortable li\").forEach(el => {\n                            el.style.boxShadow ='inset 0 0 1px rgba(0, 0, 0, .5)'\n                        });\n                    }\n                }}>Disable grid</button> \n\n\n                 {/* <p id=\"levelPanel\">\n                        <input \n                          type=\"radio\" \n                          name=\"level\" \n                          value={3} \n                          onChange={(e) => cut(images, e.target.value)}\n                        /> \n                        <label htmlFor=\"easy\">3 x 3</label>\n                        <input \n                          type=\"radio\" \n                          name=\"level\" \n                          value={5} \n                          onChange={(e) => cut(images, e.target.value)}\n                        /> \n                        <label htmlFor=\"medium\">4 x 4</label>\n                        <input \n                          type=\"radio\" \n                          name=\"level\" \n                          value={10} \n                          onChange={(e) => cut(images, e.target.value)}\n                        /> \n                        <label htmlFor=\"hard\">10 x 10</label>\n                </p> */}\n            </div>\n        </>                 \n    )\n}\n\nexport default GridSelector","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nconst Image = ({match, thumbs, setThumbs}) => {\n    const id = match.params.id\n    if (thumbs.length) {\n        return (\n            <ul id=\"Thumbs-list\">\n                <li style={{\n                    backgroundImage: thumbs[id].backgroundImage, \n                    backgroundSize: thumbs[id].backgroundSize,\n                    backgroundPosition: thumbs[id].backgroundPosition,\n                    width: 150,\n                    height: 150,\n                    overflow: 'hidden'}}>{id}\n                    </li>\n                    {thumbs.map(thumb => {\n                        if (thumb.id !== thumbs[id].id) {\n                            return (\n                              <li key={thumb.id} style={{\n                                backgroundImage: thumb.backgroundImage,\n                                backgroundSize: thumb.backgroundSize,\n                                backgroundPosition: thumb.backgroundPosition,\n                                width: thumb.width,\n                                height: thumb.height,\n                                overflow: 'hidden'}}><Link to={`/gridselector/${thumb.id}`}></Link></li>                  \n                            ) \n                        }\n                    })}\n                                        \n            </ul>\n                \n\n        )\n\n    }\n    else return null\n\n}\n\nexport default Image","import './App.css';\nimport React, { useState } from 'react';\nimport Upload from './Upload.js';\nimport Cropper from './Cropper.js';\nimport GridSelector from './GridSelector.js';\nimport Image from './Image.js';\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [images, setImages] = useState([{ src: process.env.PUBLIC_URL + '/img/museum-national-d-histoire-naturelle.png'}]);\n  const [thumbs, setThumbs] = useState([])\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <nav id=\"Nav-bar\">\n          <li><button><Link to=\"/upload\">Télecharger une image</Link></button></li>\n          <li><button><Link to=\"/crop\">Recadrer l'image</Link></button></li>\n          <li><button><Link to=\"/gridselector\">grid</Link></button></li>\n        </nav>\n        <Switch>\n            <Route\n              exact\n              path=\"/upload\" \n              render={() => <Upload setImages={setImages}/>}\n            />\n            <Route\n              exact\n              path=\"/crop\" \n              render={() => <Cropper src={images[0][\"src\"]} setImages={setImages} ></Cropper>}\n            />\n            <Route \n              exact\n              path=\"/gridselector\" \n              render={() => <GridSelector images={images} thumbs={thumbs} setThumbs={setThumbs}/>}\n            />\n              <Route\n                  \n                  path=\"/mOsaic/:id\" \n                  render={(props, value) => <Image {...props} thumbs={thumbs} setThumbs={setThumbs} /> }\n              />\n        </Switch>\n      </Router>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}