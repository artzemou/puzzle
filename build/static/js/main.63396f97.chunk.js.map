{"version":3,"sources":["Upload.js","Cropper.js","GridSelector.js","Image.js","App.js","serviceWorker.js","index.js","07180db8.svg"],"names":["baseStyle","flex","display","flexDirection","alignItems","justifyContent","width","height","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","outline","transition","Upload","setImages","history","useHistory","useDropzone","accept","onDrop","files","formData","FormData","append","fetch","method","body","then","res","json","src","url","push","catch","err","console","error","acceptedFiles","getRootProps","getInputProps","style","map","file","key","path","size","useMemo","className","CropperGrid","useState","stage","setStage","rotation","setRotation","zoom","setZoom","useEffect","transformImg","Konva","Stage","container","layer","Layer","fitStageIntoParentContainer","scale","document","querySelector","offsetWidth","x","y","draw","add","Image","fromURL","img","log","draggable","offsetX","offsetY","getWidth","getHeight","rotate","batchDraw","window","addEventListener","on","e","evt","preventDefault","oldScale","scaleX","mousePointTo","getPointerPosition","newScale","deltaY","newPos","position","lastDist","p1","p2","touch1","touches","touch2","dist","clientX","clientY","Math","sqrt","pow","scaleY","shiftKey","id","onClick","dataURL","toDataURL","createElement","setAttribute","getElementById","appendChild","exportImage","variant","color","xmin","xmax","xstep","axis","onChange","htmlFor","helper","GridSelector","images","thumbs","setThumbs","cut","useCallback","gridX","gridY","data","percentage","percentageY","image","floor","random","length","i","xpos","ypos","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","offsetHeight","element","panzoom","onDoubleClick","thumb","overflow","boxShadow","to","querySelectorAll","forEach","el","match","params","App","DefaultImag","exact","render","Cropper","props","value","Boolean","location","hostname","ReactDOM","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"oMAIMA,EAAY,CAChBC,KAAM,EACNC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,SAChBC,MAAO,IACPC,OAAQ,IACRC,QAAS,OACTC,YAAa,EACbC,aAAc,EACdC,YAAa,UACbC,YAAa,SACbC,gBAAiB,UACjBC,QAAS,OACTC,WAAY,2BA+CGC,EA5CF,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UACTC,EAAUC,cADc,EAGyBC,YAAY,CAC/DC,OAAQ,UACRC,OAAQ,SAAAC,GACJ,IAAIC,EAAW,IAAIC,SACnBD,EAASE,OAAO,OAAQH,EAAM,IAE9BI,MAAM,oDAAqD,CACzDC,OAAQ,OACRC,KAAML,IAEPM,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJf,EAAU,CAAC,CAAEgB,IAAK,+BAAiCD,EAAKE,OACxDhB,EAAQiB,KAAK,YAGdC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,SAhB3BG,EAHqB,EAGrBA,cAAeC,EAHM,EAGNA,aAAcC,EAHR,EAGQA,cA0B9BC,GANQH,EAAcI,KAAI,SAAAC,GAAI,OAClC,wBAAIC,IAAKD,EAAKE,MACXF,EAAKE,KADR,MACiBF,EAAKG,KADtB,aAKYC,mBAAQ,iCACjBjD,KACD,KAGJ,OACI,6BAASkD,UAAU,aACjB,wBAAST,EAAa,CAACS,UAAW,WAAYP,UAC5C,0BAAWD,KACX,yF,yBC4KGS,EAnOK,SAAC,GAAsB,IAArBlB,EAAoB,EAApBA,IAAKhB,EAAe,EAAfA,UACrBC,EAAUC,cAD0B,EAGdiC,mBAAS,MAHK,mBAGjCC,EAHiC,KAG1BC,EAH0B,OAIRF,mBAAS,GAJD,mBAIjCG,EAJiC,KAIvBC,EAJuB,OAKhBJ,mBAAS,GALO,mBAKjCK,EALiC,KAK3BC,EAL2B,KAOxCC,qBAAU,WACNC,EAAa3B,EAAKwB,EAAMF,KACzB,CAACtB,EAAKsB,EAAUE,IAEnB,IAAMG,EAAe,SAAC3B,EAAKwB,EAAMF,GAE/B,IAIIF,EAAQ,IAAIQ,IAAMC,MAAM,CAC1BC,UAAW,YACXzD,MANe,IAOfC,OANgB,MAWdyD,EAAQ,IAAIH,IAAMI,MAuBtB,SAASC,IACP,IAKIC,EALYC,SAASC,cAAc,iBAGRC,YAvChB,IA2CfjB,EAAM/C,MA3CS,IA2CU6D,GACzBd,EAAM9C,OA3CU,IA2CW4D,GAC3Bd,EAAMc,MAAM,CAAEI,EAAGJ,EAAOK,EAAGL,IAC3Bd,EAAMoB,OAjCRpB,EAAMqB,IAAIV,GAIVH,IAAMc,MAAMC,QAAQ3C,GAAO,sGAAsG,SAAA4C,GAC/HvC,QAAQwC,IAAID,GACZA,EAAIE,WAAU,GACdF,EAAIG,QAAQH,EAAIvE,QAAU,GAC1BuE,EAAII,QAAQJ,EAAItE,SAAW,GAC3BsE,EAAIV,MAAM,CAACI,EAAEd,EAAMe,EAAEf,IACrBoB,EAAIN,EAAElB,EAAM6B,WAAa,GACzBL,EAAIL,EAAEnB,EAAM8B,YAAc,GAC1BN,EAAIO,OAAO7B,GACXS,EAAMU,IAAIG,GACVb,EAAMqB,eAsBRnB,IAEAoB,OAAOC,iBAAiB,SAAUrB,GAMlCb,EAAMmC,GAAG,SAAS,SAAAC,GAChBA,EAAEC,IAAIC,iBACJ,IAAIC,EAAWvC,EAAMwC,SAEjBC,EACCzC,EAAM0C,qBAAqBxB,EAAIqB,EAAWvC,EAAMkB,IAAMqB,EADvDE,EAECzC,EAAM0C,qBAAqBvB,EAAIoB,EAAWvC,EAAMmB,IAAMoB,EAGvDI,EACFP,EAAEC,IAAIO,OAAS,EAXP,IAWWL,EAAqBA,EAXhC,IAYVvC,EAAMc,MAAM,CAAEI,EAAGyB,EAAUxB,EAAGwB,IAE9B,IAAIE,EAAS,CACX3B,IACIuB,EAAiBzC,EAAM0C,qBAAqBxB,EAAIyB,GAClDA,EACFxB,IACIsB,EAAiBzC,EAAM0C,qBAAqBvB,EAAIwB,GAClDA,GAEJ3C,EAAM8C,SAASD,GACf7C,EAAMgC,eAOV,IAAIe,EAAW,EAMf/C,EAAMmC,GAAG,aAAa,SAASC,GAC7BA,EAAEC,IAAIC,iBACN,IANmBU,EAAIC,EAMnBC,EAASd,EAAEC,IAAIc,QAAQ,GACvBC,EAAShB,EAAEC,IAAIc,QAAQ,GAE3B,GAAID,GAAUE,EAAQ,CACpB,IAAIC,GAVaL,EAWf,CACE9B,EAAGgC,EAAOI,QACVnC,EAAG+B,EAAOK,SAbON,EAenB,CACE/B,EAAGkC,EAAOE,QACVnC,EAAGiC,EAAOG,SAhBTC,KAAKC,KAAKD,KAAKE,IAAIT,EAAG/B,EAAI8B,EAAG9B,EAAG,GAAKsC,KAAKE,IAAIT,EAAG9B,EAAI6B,EAAG7B,EAAG,KAoB3D4B,IACHA,EAAWM,GAGb,IAAIvC,EAASd,EAAMwC,SAAWa,EAAQN,EAEtC/C,EAAMwC,OAAO1B,GACbd,EAAM2D,OAAO7C,GACbd,EAAMgC,YACNe,EAAWM,MAIfrD,EAAMmC,GAAG,YAAY,WACnBY,EAAW,KAIb/C,EAAMmC,GAAG,YAAY,SAASC,GAC5BA,EAAEC,IAAIC,iBACN,IAAIC,EAAWvC,EAAMwC,SACjBG,EAAYP,EAAEC,IAAIuB,SAAgCrB,EA1E1C,QA0EqBA,EAE7BE,EACGzC,EAAM0C,qBAAqBxB,EAAIqB,EAAWvC,EAAMkB,IAAMqB,EADzDE,EAEGzC,EAAM0C,qBAAqBvB,EAAIoB,EAAWvC,EAAMmB,IAAMoB,EAE7DvC,EAAMc,MAAM,CAAEI,EAAGyB,EAAUxB,EAAGwB,IAC9B,IAAIE,EAAS,CACX3B,IACIuB,EAAiBzC,EAAM0C,qBAAqBxB,EAAIyB,GAClDA,EACFxB,IACIsB,EAAiBzC,EAAM0C,qBAAqBvB,EAAIwB,GAClDA,GAGJ1D,QAAQwC,IAAIkB,EAAUP,EAAEC,IAAIuB,UAC5B5D,EAAM8C,SAASD,GACflC,EAAMqB,eAIR/B,EAASD,IAeX,OACE,yBAAKH,UAAU,WACb,yBAAKA,UAAU,mBAEf,yBAAKgE,GAAG,cACR,yBAAKA,GAAG,gBACN,yBAAKA,GAAG,cACR,yBAAKA,GAAG,YAEV,yBAAKhE,UAAU,oBACb,yBACIA,UAAU,mBACViE,QAAS,kBAxBC,WAClB,IAAIC,EAAU/D,EAAMgE,YAChBxC,EAAMT,SAASkD,cAAc,OACjCzC,EAAI0C,aAAa,cAAe,aAChC1C,EAAIvE,MAAQ,IAEZuE,EAAI5C,IAAMmF,EACVhD,SAASoD,eAAe,UAAUC,YAAY5C,GAC9C5D,EAAU,CAAC,CAACgB,IAAKmF,KACjBlG,EAAQiB,KAAK,iBAeUuF,IACfC,QAAQ,YACRC,MAAM,WAJV,YAOA,6BACE,kBAAC,IAAD,CACEC,KAAM,GACNC,KAAM,EACNC,MAAO,GACPC,KAAK,IACLzD,EAAGd,EACHwE,SAAU,YAAY,IAAT1D,EAAQ,EAARA,EACXb,EAAQa,MAGZ,2BAAO2D,QAAQ,UAAf,QACA,kBAAC,IAAD,CACEL,KAAM,EACNC,KAAM,IACNC,MAAO,GACPC,KAAK,IACLzD,EAAGhB,EACH0E,SAAU,YAAY,IAAT1D,EAAQ,EAARA,EACXf,EAAYe,MAGhB,2BAAO2D,QAAQ,UAAf,gB,iCC3NNC,EACK,SAACjB,GAAD,OAAQ9C,SAASoD,eAAeN,IAAO9C,SAASkD,cAAc,QAoIxDc,EAzHM,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,UAC7BC,EAAMC,uBAAY,SAACJ,GAAiC,IAAzBK,EAAwB,uDAAjB,GAAIC,EAAa,uDAAN,EACvCC,EAAO,GACPC,EAAa,KAAOH,EAAQ,GAC5BI,EAAc,KAAOH,EAAQ,GACjCrG,QAAQwC,IAAIgE,GACZ,IAAIC,EAAQV,EAAOxB,KAAKmC,MAAMnC,KAAKoC,SAAWZ,EAAOa,SACrDf,EAAW,eAAeZ,aAAa,MAAOwB,EAAM9G,KAEpD,IAAK,IAAIkH,EAAI,EAAGA,EAAIT,EAAQC,EAAOQ,IAAK,CACpC,IAAIC,EAAQP,GAAcM,EAAIT,GAAU,IAEpCW,EAAQP,EAAcjC,KAAKmC,MAAMG,EAAIT,GAAU,IAGnDE,EAAI,sBACGA,GADH,CAEA,CACI1B,GAAIiC,EACJlH,IAAK8G,EAAM9G,IACXqH,gBAAiB,OAASP,EAAM9G,IAAM,IACtCsH,eAAyB,IAARb,EAAe,IAAe,IAARC,EAAe,IACtDa,mBAAoBJ,EAAO,IAAMC,EACjC/I,MAAO6H,EAAW,YAAY7D,YAAcoE,EAAQ,KACpDe,iBAAiB,YACjBlJ,OAAS4H,EAAW,YAAYuB,aAAef,EAAS,QAOpEJ,EAAUK,KAEX,CAACL,IAgBR,OAdA5E,qBAAU,WACH0E,EAAOa,QAAQV,EAAIH,GACtB,IAAIsB,EAAUxB,EAAW,iBACzByB,IAAQD,EAAS,CACbE,cAAe,SAASpE,GAGtB,OAAO,OAId,CAAC+C,EAAKH,IAET/F,QAAQwC,IAAIwD,GAER,oCACI,yBAAKpB,GAAG,QACJ,6BAASA,GAAG,iBACR,wBAAIA,GAAG,WAAWhE,UAAU,YACvBoF,EAAO1F,KAAI,SAACkH,GAAD,OACR,wBAAIhH,IAAKgH,EAAM5C,GAAIvE,MAAO,CACtB2G,gBAAiBQ,EAAMR,gBACvBC,eAAgBO,EAAMP,eACtBC,mBAAoBM,EAAMN,mBAC1BlJ,MAAOwJ,EAAMxJ,MACbC,OAAQuJ,EAAMvJ,OACdwJ,SAAU,SACVC,UAAW,kCACXP,iBAAiBK,EAAML,mBACnB,kBAAC,IAAD,CACItC,QAAS,SAAC1B,GACNA,EAAEE,kBAENkE,cAAe,SAACpE,GACZnD,QAAQwC,IAAR,UAAegF,EAAM5C,GAArB,qBAEJ+C,GAAE,wBAAmBH,EAAM5C,aAMvD,yBAAKA,GAAG,kBACJ,4BAAQC,QAAS,SAAC1B,GACgD,SAA3DrB,SAASC,cAAc,gBAAgB1B,MAAMqH,UAC5C5F,SAAS8F,iBAAiB,gBAAgBC,SAAQ,SAAAC,GAC9CA,EAAGzH,MAAMqH,UAAW,UAIxB5F,SAAS8F,iBAAiB,gBAAgBC,SAAQ,SAAAC,GAC9CA,EAAGzH,MAAMqH,UAAW,uCARhC,mBCtDDrF,EAvCD,SAAC,GAAgC,IAA/B0F,EAA8B,EAA9BA,MAAO/B,EAAuB,EAAvBA,OACbpB,GADoC,EAAfqB,UAChB8B,EAAMC,OAAOpD,IAExB,OADA5E,QAAQwC,IAAIwD,GACRA,EAAOY,QACP5G,QAAQwC,IAAIwD,GAER,wBAAIpB,GAAG,eACH,wBAAIvE,MAAO,CACP2G,gBAAiBhB,EAAOpB,GAAIoC,gBAC5BC,eAAgBjB,EAAOpB,GAAIqC,eAC3BC,mBAAoBlB,EAAOpB,GAAIsC,mBAC/BlJ,MAAO,IACPC,OAAQ,IACRwJ,SAAU,WAAY7C,GAErBoB,EAAO1F,KAAI,SAAAkH,GACR,GAAIA,EAAM5C,KAAOoB,EAAOpB,GAAIA,GACxB,OACE,wBAAIpE,IAAKgH,EAAM5C,GAAIvE,MAAO,CACxB2G,gBAAiBQ,EAAMR,gBACvBC,eAAgBO,EAAMP,eACtBC,mBAAoBM,EAAMN,mBAC1BlJ,MAAOwJ,EAAMxJ,MACbC,OAAQuJ,EAAMvJ,OACdwJ,SAAU,WAAW,kBAAC,IAAD,CAAME,GAAE,wBAAmBH,EAAM5C,YAWtE,M,iBCmBDqD,MA9Cf,WAAgB,IAAD,EACenH,mBAAS,CAAC,CAAEnB,IAAKuI,OADhC,mBACNnC,EADM,KACEpH,EADF,OAEemC,mBAAS,IAFxB,mBAENkF,EAFM,KAEEC,EAFF,KAMb,OADFjG,QAAQwC,IAAIwD,GAER,yBAAKpF,UAAU,OACb,kBAAC,IAAD,KACE,yBAAKgE,GAAG,WACN,4BAAI,kBAAC,IAAD,CAAM+C,GAAG,WAAT,WACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,SAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,iBAAT,UAEN,kBAAC,IAAD,KACI,kBAAC,IAAD,CACEQ,OAAK,EACL1H,KAAK,UACL2H,OAAQ,kBAAM,kBAAC,EAAD,CAAQzJ,UAAWA,OAEnC,kBAAC,IAAD,CACEwJ,OAAK,EACL1H,KAAK,QACL2H,OAAQ,kBAAM,kBAACC,EAAD,CAAS1I,IAAKoG,EAAO,GAAP,IAAkBpH,UAAWA,OAE3D,kBAAC,IAAD,CACEwJ,OAAK,EACL1H,KAAK,gBACL2H,OAAQ,kBAAM,kBAAC,EAAD,CAAcrC,OAAQA,EAAQC,OAAQA,EAAQC,UAAWA,OAEvE,kBAAC,IAAD,CAEIxF,KAAK,oBACL2H,OAAQ,SAACE,EAAOC,GAAR,OAAkB,kBAAC,EAAD,iBAAWD,EAAX,CAAkBtC,OAAQA,EAAQC,UAAWA,YChCrEuC,QACW,cAA7BxF,OAAOyF,SAASC,UAEe,UAA7B1F,OAAOyF,SAASC,UAEhB1F,OAAOyF,SAASC,SAASX,MACvB,2DCZNY,IAASP,OAAO,kBAAC,EAAD,MAAStG,SAASoD,eAAe,SD6H3C,kBAAmB0D,WACrBA,UAAUC,cAAcC,MACrBtJ,MAAK,SAAAuJ,GACJA,EAAaC,gBAEdlJ,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMgJ,a,mBEzI5BC,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.63396f97.chunk.js","sourcesContent":["import React, {useMemo} from 'react'\nimport {useDropzone} from 'react-dropzone';\nimport { useHistory } from \"react-router-dom\";\n\nconst baseStyle = {\n  flex: 1,\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  justifyContent: 'center',\n  width: 200,\n  height: 200,\n  padding: '20px',\n  borderWidth: 2,\n  borderRadius: 2,\n  borderColor: '#eeeeee',\n  borderStyle: 'dashed',\n  backgroundColor: '#ffffff',\n  outline: 'none',\n  transition: 'border .24s ease-in-out'\n};\n\nconst Upload = ({setImages}) => {\n    let history = useHistory();\n  \n    const {acceptedFiles, getRootProps, getInputProps} = useDropzone({\n      accept: 'image/*',\n      onDrop: files => {\n          var formData = new FormData();\n          formData.append('file', files[0]);\n  \n          fetch('https://spgp-api-pre.65mo.fr/api/v2/medias/upload', {\n            method: 'POST',\n            body: formData\n          })\n          .then(res => res.json())\n          .then(json => {\n            setImages([{ src: 'https://spgp-api-pre.65mo.fr' + json.url}])\n            history.push('/crop')\n  \n          })\n          .catch(err => console.error(err));\n        }\n    });\n  \n    const files = acceptedFiles.map(file => (\n      <li key={file.path}>\n        {file.path} - {file.size} bytes\n      </li>\n    ))\n\n    const style = useMemo(() => ({\n      ...baseStyle,\n    }), []);\n\n\n    return (\n        <section className=\"container\">\n          <div {...getRootProps({className: 'dropzone', style})}>\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop some files here, or click to select files</p>\n          </div>\n        </section>\n    )\n  }\n  \n  export default Upload","import React, { useState, useEffect } from 'react'\nimport { useHistory } from \"react-router-dom\";\nimport Slider from 'react-input-slider';\nimport Konva from 'konva';\n\nconst CropperGrid = ({src, setImages}) => {\n  let history = useHistory();\n  \n  const [stage, setStage] = useState(null)\n  const [rotation, setRotation] = useState(0)\n  const [zoom, setZoom] = useState(1)\n\n  useEffect(() => {\n      transformImg(src, zoom, rotation)\n  }, [src, rotation, zoom])\n\n  const transformImg = (src, zoom, rotation) => {\n    \n    var stageWidth = 500 ;\n    var stageHeight = 350;\n    \n  \n    var stage = new Konva.Stage({\n      container: 'container',\n      width: stageWidth,\n      height: stageHeight\n    });\n\n    \n    \n    var layer = new Konva.Layer();\n    stage.add(layer);\n\n\n    \n    Konva.Image.fromURL(src || \"https://spgp-api-pre.65mo.fr/api/containers/spgp/download/06c80ebb-481c-46d2-956d-5871a540cbf7.png\", img => {\n      console.log(img)\n      img.draggable(true)\n      img.offsetX(img.width() / 2);\n      img.offsetY(img.height() / 2);\n      img.scale({x:zoom, y:zoom})\n      img.x(stage.getWidth() / 2)\n      img.y(stage.getHeight() / 2)\n      img.rotate(rotation);\n      layer.add(img);\n      layer.batchDraw();\n    //   const tr = new Konva.Transformer({\n    //     node: img,\n    //     // enabledAnchors: ['top-left', 'top-right', 'bottom-left', 'bottom-right'],\n    //   });\n    //   layer.add(tr)\n    });\n\n    function fitStageIntoParentContainer() {\n      var container = document.querySelector('#stage-parent');\n\n      // now we need to fit stage into parent\n      var containerWidth = container.offsetWidth;\n      // to do this we need to scale the stage\n      var scale = containerWidth / stageWidth;\n\n      stage.width(stageWidth * scale);\n      stage.height(stageHeight * scale);\n      stage.scale({ x: scale, y: scale });\n      stage.draw();\n    }\n\n    fitStageIntoParentContainer();\n    // adapt the stage on any window resize\n    window.addEventListener('resize', fitStageIntoParentContainer);\n  \n\n    \n    //zoom on scroll\n    var scaleBy = 1.5;\n    stage.on('wheel', e => {\n      e.evt.preventDefault();\n        var oldScale = stage.scaleX();\n\n        var mousePointTo = {\n          x: stage.getPointerPosition().x / oldScale - stage.x() / oldScale,\n          y: stage.getPointerPosition().y / oldScale - stage.y() / oldScale\n        };\n\n        var newScale =\n          e.evt.deltaY < 0 ? oldScale * scaleBy : oldScale / scaleBy;\n        stage.scale({ x: newScale, y: newScale });\n\n        var newPos = {\n          x:\n            -(mousePointTo.x - stage.getPointerPosition().x / newScale) *\n            newScale,\n          y:\n            -(mousePointTo.y - stage.getPointerPosition().y / newScale) *\n            newScale\n        };\n        stage.position(newPos);\n        stage.batchDraw();\n\n\n    });\n\n\n    // zoom on dbltouch\n    var lastDist = 0;\n\n    function getDistance(p1, p2) {\n      return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n    }\n\n    stage.on('touchmove', function(e) {\n      e.evt.preventDefault();\n      var touch1 = e.evt.touches[0];\n      var touch2 = e.evt.touches[1];\n\n      if (touch1 && touch2) {\n        var dist = getDistance(\n          {\n            x: touch1.clientX,\n            y: touch1.clientY\n          },\n          {\n            x: touch2.clientX,\n            y: touch2.clientY\n          }\n        );\n\n        if (!lastDist) {\n          lastDist = dist;\n        }\n\n        var scale = (stage.scaleX() * dist) / lastDist;\n\n        stage.scaleX(scale);\n        stage.scaleY(scale);\n        stage.batchDraw();\n        lastDist = dist;\n      }\n    });\n\n    stage.on('touchend', function() {\n      lastDist = 0;\n    });\n    \n    // zoom on dblClick\n    stage.on('dblclick', function(e) {\n      e.evt.preventDefault();\n      var oldScale = stage.scaleX();\n      var newScale = !e.evt.shiftKey ? oldScale * scaleBy : oldScale / scaleBy;\n\n      var mousePointTo = {\n          x: stage.getPointerPosition().x / oldScale - stage.x() / oldScale,\n          y: stage.getPointerPosition().y / oldScale - stage.y() / oldScale\n      };\n      stage.scale({ x: newScale, y: newScale });\n      var newPos = {\n        x:\n          -(mousePointTo.x - stage.getPointerPosition().x / newScale) *\n          newScale,\n        y:\n          -(mousePointTo.y - stage.getPointerPosition().y / newScale) *\n          newScale\n      };\n\n      console.log(newScale, e.evt.shiftKey )\n      stage.position(newPos);\n      layer.batchDraw();\n    });\n\n\n    setStage(stage)\n  }\n\n  const exportImage = () => {\n    var dataURL = stage.toDataURL();\n    let img = document.createElement('img')\n    img.setAttribute('crossOrigin', 'anonymous');\n    img.width = 500\n\n    img.src = dataURL\n    document.getElementById('apercu').appendChild(img)\n    setImages([{src: dataURL}])\n    history.push('/gridselector')\n  }\n\n  return (\n    <div className=\"Cropper\">\n      <div className=\"crop-container\">\n      </div>\n      <div id=\"container\"></div>\n      <div id=\"stage-parent\">\n        <div id=\"container\"></div>\n        <div id=\"apercu\"></div>\n      </div>\n      <div className=\"Cropper-controls\">\n        <div\n            className=\"Cropper-btn-crop\"\n            onClick={() => exportImage()}\n            variant=\"contained\"\n            color=\"primary\"\n          >Recadrer</div>\n       \n        <div>\n          <Slider\n            xmin={.1}\n            xmax={3}\n            xstep={.1}\n            axis=\"x\"\n            x={zoom}\n            onChange={({ x }) => {\n              setZoom(x)\n            }}\n          />\n          <label htmlFor=\"volume\">Zoom</label>\n          <Slider\n            xmin={0}\n            xmax={360}\n            xstep={.1}\n            axis=\"x\"\n            x={rotation}\n            onChange={({ x }) => {\n              setRotation(x)\n            }}\n          />\n          <label htmlFor=\"volume\">Rotation</label>\n        </div>\n\n      </div>\n    </div>\n  )\n}\n\nexport default CropperGrid","import React, { useState, useEffect, useCallback } from 'react';\nimport { Link } from \"react-router-dom\";\nimport panzoom from \"panzoom\"\n\n\nvar helper = {\n    doc: (id) => document.getElementById(id) || document.createElement(\"div\"),\n  \n    shuffle: (id) => {\n        var ul = document.getElementById(id);\n        for (var i = ul.children.length; i >= 0; i--) {\n            ul.appendChild(ul.children[Math.random() * i | 0]);\n            console.log(ul.children[i])\n        }\n    }\n}\n  \nconst GridSelector = ({images, thumbs, setThumbs}) => {\n    const cut = useCallback((images, gridX= 10, gridY= 7) => {\n            var data = []\n            var percentage = 100 / (gridX - 1);\n            var percentageY = 100 / (gridY - 1);\n            console.log(percentageY)\n            var image = images[Math.floor(Math.random() * images.length)];\n            helper.doc('actualImage').setAttribute('src', image.src);\n            // 4961 / 3508\n            for (var i = 0; i < gridX * gridY; i++) {\n                var xpos = (percentage * (i % gridX)) + '%';\n                // var xpos = (percentage * Math.floor(i % gridX)) + '%';\n                var ypos = (percentageY * Math.floor(i / gridX)) + '%';\n                // var ypos = (percentageY * (i / gridY)) + '%';\n      \n                data = [\n                    ...data,\n                    {\n                        id: i,\n                        src: image.src,\n                        backgroundImage: 'url(' + image.src + ')',\n                        backgroundSize: (gridX * 100) + '%' + (gridY * 100) + '%',\n                        backgroundPosition: xpos + ' ' + ypos,\n                        width: helper.doc('sortable').offsetWidth / gridX + 'px',\n                        backgroundRepeat:\"no-repeat\",\n                        height: (helper.doc('sortable').offsetHeight / gridY) + 'px'\n                        \n                    }\n                ]\n      \n                // helper.doc('sortable').appendChild(li);\n            }\n            setThumbs(data)\n           \n        }, [setThumbs])\n\n    useEffect(() => {\n        if(images.length) cut(images)\n        var element = helper.doc('Grid-selector')\n        panzoom(element, {\n            onDoubleClick: function(e) {\n              // `e` - is current double click event.\n          \n              return false; // tells the library to not preventDefault, and not stop propagation\n            }\n          })\n      \n    }, [cut, images])\n\n    console.log(thumbs)\n    return (\n        <>\n            <div id=\"Grid\">\n                <section id=\"Grid-selector\">\n                    <ul id=\"sortable\" className=\"sortable\">\n                        {thumbs.map((thumb)=>(\n                            <li key={thumb.id} style={{\n                                backgroundImage: thumb.backgroundImage,\n                                backgroundSize: thumb.backgroundSize,\n                                backgroundPosition: thumb.backgroundPosition,\n                                width: thumb.width,\n                                height: thumb.height,\n                                overflow: 'hidden',\n                                boxShadow: 'inset 0 0 1px rgba(0, 0, 0, .5)',\n                                backgroundRepeat:thumb.backgroundRepeat}}>\n                                    <Link \n                                        onClick={(e) => {\n                                            e.preventDefault()\n                                        }} \n                                        onDoubleClick={(e) => {\n                                            console.log(`${thumb.id} is dblcClicked`)\n                                        }} \n                                        to={`/gridselector/${thumb.id}`}></Link>\n                            </li>\n                        ))} \n                    </ul>\n                </section>\n            </div>\n            <div id=\"actualImageBox\">\n                <button onClick={(e) => {\n                    if(document.querySelector(\"#sortable li\").style.boxShadow !== 'none') {\n                        document.querySelectorAll(\"#sortable li\").forEach(el => {\n                            el.style.boxShadow ='none'\n                        });\n                    }\n                    else {\n                        document.querySelectorAll(\"#sortable li\").forEach(el => {\n                            el.style.boxShadow ='inset 0 0 1px rgba(0, 0, 0, .5)'\n                        });\n                    }\n                }}>Disable grid</button> \n\n\n                 {/* <p id=\"levelPanel\">\n                        <input \n                          type=\"radio\" \n                          name=\"level\" \n                          value={3} \n                          onChange={(e) => cut(images, e.target.value)}\n                        /> \n                        <label htmlFor=\"easy\">3 x 3</label>\n                        <input \n                          type=\"radio\" \n                          name=\"level\" \n                          value={5} \n                          onChange={(e) => cut(images, e.target.value)}\n                        /> \n                        <label htmlFor=\"medium\">4 x 4</label>\n                        <input \n                          type=\"radio\" \n                          name=\"level\" \n                          value={10} \n                          onChange={(e) => cut(images, e.target.value)}\n                        /> \n                        <label htmlFor=\"hard\">10 x 10</label>\n                </p> */}\n            </div>\n        </>                 \n    )\n}\n\nexport default GridSelector","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nconst Image = ({match, thumbs, setThumbs}) => {\n    const id = match.params.id\n    console.log(thumbs)\n    if (thumbs.length) {\n        console.log(thumbs)\n        return (\n            <ul id=\"Thumbs-list\">\n                <li style={{\n                    backgroundImage: thumbs[id].backgroundImage,\n                    backgroundSize: thumbs[id].backgroundSize,\n                    backgroundPosition: thumbs[id].backgroundPosition,\n                    width: 150,\n                    height: 150,\n                    overflow: 'hidden'}}>{id}\n                    </li>\n                    {thumbs.map(thumb => {\n                        if (thumb.id !== thumbs[id].id) {\n                            return (\n                              <li key={thumb.id} style={{\n                                backgroundImage: thumb.backgroundImage,\n                                backgroundSize: thumb.backgroundSize,\n                                backgroundPosition: thumb.backgroundPosition,\n                                width: thumb.width,\n                                height: thumb.height,\n                                overflow: 'hidden'}}><Link to={`/gridselector/${thumb.id}`}></Link></li>                  \n                            ) \n                        }\n                    })}\n                                        \n            </ul>\n                \n\n        )\n\n    }\n    else return null\n\n}\n\nexport default Image","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport Upload from './Upload.js';\nimport Cropper from './Cropper.js';\nimport GridSelector from './GridSelector.js';\nimport Image from './Image.js';\nimport DefaultImag from './07180db8.svg'\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [images, setImages] = useState([{ src: DefaultImag}]);\n  const [thumbs, setThumbs] = useState([])\n\n\nconsole.log(thumbs)\n  return (\n    <div className=\"App\">\n      <Router>\n        <nav id=\"Nav-bar\">\n          <li><Link to=\"/upload\">upload</Link></li>\n          <li><Link to=\"/crop\">crop</Link></li>\n          <li><Link to=\"/gridselector\">grid</Link></li>\n        </nav>\n        <Switch>\n            <Route\n              exact\n              path=\"/upload\" \n              render={() => <Upload setImages={setImages}/>}\n            />\n            <Route\n              exact\n              path=\"/crop\" \n              render={() => <Cropper src={images[0][\"src\"]} setImages={setImages} ></Cropper>}\n            />\n            <Route \n              exact\n              path=\"/gridselector\" \n              render={() => <GridSelector images={images} thumbs={thumbs} setThumbs={setThumbs}/>}\n            />\n              <Route\n                  \n                  path=\"/gridselector/:id\" \n                  render={(props, value) => <Image {...props} thumbs={thumbs} setThumbs={setThumbs} /> }\n              />\n\n\n        </Switch>\n        \n      </Router>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/07180db8.933db819.svg\";"],"sourceRoot":""}